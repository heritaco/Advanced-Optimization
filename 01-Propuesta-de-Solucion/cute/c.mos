!@encoding CP1252

model Warehouse
    uses "mmxprs"

    declarations
        x: array(1..12, 1..12) of mpvar  ! Decision variables: units shipped
        y: array(1..12) of mpvar        ! Binary variables for warehouse activation
        M: real                        ! Large constant for linking constraints
    end-declarations

    M := 185  ! All demands

    forall(i in 1..12, j in 1..12) x(i,j) <= M * y(i)  ! No flow from closed warehouse

    ! Objective: Minimize transportation + fixed costs
    Cost := 00.00*x(1,1) + 05.25*x(2,1) + 12.95*x(3,1) + 19.25*x(4,1) + 08.40*x(5,1) + 21.00*x(6,1) + 06.30*x(7,1) + 11.55*x(8,1) + 16.80*x(9,1) + 14.00*x(10,1) + 21.00*x(11,1) + 23.45*x(12,1) +
            05.25*x(1,2) + 00.00*x(2,2) + 14.00*x(3,2) + 14.00*x(4,2) + 13.30*x(5,2) + 18.20*x(6,2) + 11.55*x(7,2) + 16.80*x(8,2) + 14.70*x(9,2) + 19.25*x(10,2) + 21.35*x(11,2) + 21.35*x(12,2) +
            12.95*x(1,3) + 07.70*x(2,3) + 06.30*x(3,3) + 06.30*x(4,3) + 05.60*x(5,3) + 10.50*x(6,3) + 14.35*x(7,3) + 09.80*x(8,3) + 07.00*x(9,3) + 20.30*x(10,3) + 13.65*x(11,3) + 13.65*x(12,3) +
            19.25*x(1,4) + 14.00*x(2,4) + 00.00*x(3,4) + 00.00*x(4,4) + 11.90*x(5,4) + 04.20*x(6,4) + 20.65*x(7,4) + 16.10*x(8,4) + 08.40*x(9,4) + 21.70*x(10,4) + 15.05*x(11,4) + 11.90*x(12,4) +
            08.40*x(1,5) + 13.30*x(2,5) + 05.60*x(3,5) + 11.90*x(4,5) + 00.00*x(5,5) + 12.60*x(6,5) + 08.75*x(7,5) + 04.20*x(8,5) + 08.40*x(9,5) + 16.45*x(10,5) + 12.95*x(11,5) + 15.05*x(12,5) +
            21.00*x(1,6) + 18.20*x(2,6) + 10.50*x(3,6) + 04.20*x(4,6) + 12.60*x(5,6) + 00.00*x(6,6) + 19.95*x(7,6) + 14.70*x(8,6) + 04.20*x(9,6) + 17.50*x(10,6) + 10.85*x(11,6) + 07.70*x(12,6) +
            06.30*x(1,7) + 11.55*x(2,7) + 14.35*x(3,7) + 20.65*x(4,7) + 08.75*x(5,7) + 19.95*x(6,7) + 00.00*x(7,7) + 05.25*x(8,7) + 15.75*x(9,7) + 07.70*x(10,7) + 14.00*x(11,7) + 21.35*x(12,7) +
            11.55*x(1,8) + 16.80*x(2,8) + 09.80*x(3,8) + 16.10*x(4,8) + 04.20*x(5,8) + 14.70*x(6,8) + 05.25*x(7,8) + 00.00*x(8,8) + 10.50*x(9,8) + 12.95*x(10,8) + 08.75*x(11,8) + 16.10*x(12,8) +
            16.80*x(1,9) + 14.70*x(2,9) + 07.00*x(3,9) + 08.40*x(4,9) + 08.40*x(5,9) + 04.20*x(6,9) + 15.75*x(7,9) + 10.50*x(8,9) + 00.00*x(9,9) + 13.30*x(10,9) + 06.65*x(11,9) + 06.65*x(12,9) +
            14.00*x(1,10) + 19.25*x(2,10) + 20.30*x(3,10) + 21.70*x(4,10) + 16.45*x(5,10) + 17.50*x(6,10) + 07.70*x(7,10) + 12.95*x(8,10) + 13.30*x(9,10) + 00.00*x(10,10) + 06.65*x(11,10) + 14.00*x(12,10) +
            21.00*x(1,11) + 23.45*x(2,11) + 13.65*x(3,11) + 15.05*x(4,11) + 12.95*x(5,11) + 10.85*x(6,11) + 14.00*x(7,11) + 08.75*x(8,11) + 06.65*x(9,11) + 06.65*x(10,11) + 00.00*x(11,11) + 07.35*x(12,11) +
            23.45*x(1,12) + 21.35*x(2,12) + 13.65*x(3,12) + 11.90*x(4,12) + 15.05*x(5,12) + 07.70*x(6,12) + 21.35*x(7,12) + 16.10*x(8,12) + 06.65*x(9,12) + 14.00*x(10,12) + 07.35*x(11,12) + 00.00*x(12,12) +
            100*y(1) + 200*y(2) + 130*y(3) + 
            150*y(4) + 225*y(5) + 175*y(6) +
            190*y(7) + 210*y(8) + 165*y(9) +
            230*y(10) + 125*y(11) + 215*y(12)
    minimize(Cost)

    ! Demand constraints
    sum(i in 1..12) x(i,1) >= 15  ! Demand at S1
    sum(i in 1..12) x(i,2) >= 10  ! Demand at S2
    sum(i in 1..12) x(i,3) >= 12  ! Demand at S3
    sum(i in 1..12) x(i,4) >= 18  ! Demand at S4
    sum(i in 1..12) x(i,5) >= 5   ! Demand at S5
    sum(i in 1..12) x(i,6) >= 24  ! Demand at S6
    sum(i in 1..12) x(i,7) >= 11  ! Demand at S7
    sum(i in 1..12) x(i,8) >= 16  ! Demand at S8
    sum(i in 1..12) x(i,9) >= 13  ! Demand at S9
    sum(i in 1..12) x(i,10) >= 22 ! Demand at S10
    sum(i in 1..12) x(i,11) >= 19 ! Demand at S11
    sum(i in 1..12) x(i,12) >= 20 ! Demand at S12

    ! Non-negativity and binary constraints
    forall(i in 1..12, j in 1..12) x(i,j) >= 0
    forall(i in 1..12) y(i) is_binary

    ! Solve the problem
    minimize(Cost)

    ! ---------------------------------------------------------------------------------------------------------------------------------------------------

    ! Display the results
    forall(i in 1..12, j in 1..12) do
        if getsol(x(i,j)) > 1e-6 then
            writeln("x(", i, ",", j, ") = ", getsol(x(i,j)))
        end-if
    end-do

    forall(i in 1..12) do
        if getsol(y(i)) > 1e-6 then
            writeln("y(", i, ") = ", getsol(y(i)))
        end-if
    end-do
    
    writeln("Minimum Total Cost: ", getobjval)

end-model