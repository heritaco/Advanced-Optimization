!@encoding CP1252

(!
Este es un comentario largo
La primera linea permite que identifique acentos y ñ y así
mosel .\TransportePetroleo.mos
!)

model TransportePetroleo

	uses "mmxprs" !Es la libreria para el solver

	!Segun no se forzoso, es equivalente a definir variablos
	parameters
		File="TransportePetroleo.txt" !nombre del archivo de datos
		epsilon=1E-3	(!umbral para que el valor de una variable se considere mayor que cero, es 1x10^-3.
						Nos sirvo como para el metodo simplex, son iteracionos y se pueden hacer errores de redondeo,
						Entonces a partir de este valor valen cero las variables!)
	end-parameters

	declarations
		D, O: set of integer	!Conjunto de enteros. D es el conjunto de puertos de demando, O son los almacenes
	end-declarations

	!Un bloque de inicializaciones
	initializations from File	!Va a ir al File que declaramos antes
		D O						!Queremos leer el conjunto de datos con demanda y los almacenes. No importa el orden
	end-initializations

	declarations

		o: array(O) of real		!Con el arreglo que abrimos antes

		d: array(D) of real		!Array es un arreglo y array(conjunto que indexa)
		!Es un arreglo(indexado por los puertos de demanda) formado por reales

		c: dynamic array(P: range,P) of real
		!declaro c y el conjunto de puertos. Es un arreglo dinámico.
		!Es una matriz, indexada por P y P
		!En un rango se pone valor-inicial ... valor-final, ejemplo 1 ... 10 es 1,2,3,...,10

		x: dynamic array(P,P) of mpvar
		!mpvar es el tipo de dato, que es matematical programing variable.

		Costo: linctr
		!Se define como linear constraint. aqui vamos a guardar la f.o.

		FlowBalanceCtr: array(P) of linctr
		!El arreglo de linear constrait. aqui vamos a guardar las restricciones como tal.
		!Va a estar indexado por P. Cada espacio va a ser una restriccion

		!T no esta pero lo podemos sacar. Union es +, Interseccion es *, Diferencia es -
		!T es P-(O+D)

		!Tampoco esta R, los conjuntos tienen que ser de datos basicos, no pueden ser tuplas ni nada de eso
	end-declarations

	!Nos falta leer las ofertas y las demandas
	initializations from File
		o d c
	end-initializations

	forall(i,j in P | exists(c(i,j))) create(x(i,j))
	!Para todo i,j en P. Tal que existe in costo, entonces crea la variable de decision
	Costo:=sum(i,j in P | exists(c(i,j))) c(i,j)*x(i,j)
	!Restricciones de puertos de oferta: oferta disponible + flujo entrante = flujo saliente
	forall(i in O) FlowBalanceCtr(i):=o(i)+sum(j in P | exists(c(j,i))) x(j,i) = sum(j in P | exists(c(i,j))) x(i,j)
	!Vamos a guardar el valor o(i)
	!Restricciones de puertos de demanda: flujo entrante - demanda = flujo saliente
	forall(i in D) FlowBalanceCtr(i):=sum(j in P | exists(c(j,i))) x(j,i) - d(i) = sum(j in P | exists(c(i,j))) x(i,j)
                														!La d esta despejada
	!Restricciones de puertos de transbordo: flujo entrante = flujo saliente
	forall(i in P-(O+D)) FlowBalanceCtr(i):=sum(j in P | exists(c(j,i))) x(j,i) = sum(j in P | exists(c(i,j))) x(i,j)
	
	minimize(Costo)

	writeln("Costo m�nimo de transporte: ", getobjval*1000)!Lo multiplicamos *1000 porque todo esta en 1000 unidades

	forall(i,j in P | exists(c(i,j)) and getsol(x(i,j))>epsilon)
		writeln("Enviar ", strfmt(getsol(x(i,j))*1000,7,0), " barriles del puerto ", strfmt(i,3), " al puerto ", strfmt(j,3))
	forall(i in P) do
		if sum(j in P | exists(c(j,i))) getsol(x(j,i))>0 or sum(j in P | exists(c(i,j))) getsol(x(i,j))>0 then
			writeln("El puerto ", i)
			forall(j in P | exists(c(j,i)) and getsol(x(j,i))>epsilon)
				writeln("   recibe ", strfmt(getsol(x(j,i))*1000,7,0), " barriles del puerto ",j)
			forall(j in P | exists(c(i,j)) and getsol(x(i,j))>epsilon)
				writeln("   env�a ", strfmt(getsol(x(i,j))*1000,7,0), " barriles al puerto ",j)
			if exists(o(i)) then
				writeln("   tiene una disponibilidad de ", strfmt(o(i)*1000,7,0), " barilles")
			end-if
			if exists(d(i)) then
				writeln("   tiene una demanda de ", strfmt(d(i)*1000,7,0), " barilles")
			end-if
		else
			writeln("El puerto ", i, " no tiene actividad")
		end-if
	end-do

end-model