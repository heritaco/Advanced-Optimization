# pip install ortools

from ortools.linear_solver import pywraplp

# Create the solver
solver = pywraplp.Solver.CreateSolver('GLOP')
epsilon=1e-6

# Sets
O = {1,7,9,12,15,28,31,37}
D = {3,4,5,10,11,14,16,18,20,21,22,23,24,25,30,32,34,36,39,40,45,47,50,51,55,63,68,71,79,83,84,85,93,94,100}
P = set(range(1,101))

# Dictionaries
o={1: 708, 7: 735, 9: 612, 12: 444, 15: 575, 28: 397, 31: 486, 37: 1758}
d={3: 195, 4: 136, 5: 234, 10: 224, 11: 123, 14: 159, 16: 142, 18: 130, 20: 165, 21: 243,
   22: 148, 23: 219, 24: 230, 25: 201, 30: 237, 32: 223, 34: 177, 36: 135, 39: 150, 40: 132, 45: 166, 47: 110, 50: 132, 51: 108, 55: 132, 63: 181, 68: 207, 71: 152, 79: 198, 83: 102, 84: 119, 85: 120, 93: 106, 94: 114, 100: 165}
c={(1,2): 3, (1,29): 0.6, (2,3): 4.6, (3,4): 0.1, (4,5): 2.8, (4,27): 2.7,
   (4,33): 4.5, (5,6): 3.1, (5,7): 0.8, (6,7): 6.9, (6,63): 8.3, (7,8): 3.9,
   (8,9): 1.4, (8,52): 3.1, (8,53): 6.6, (9,10): 8.4, (9,48): 9.2, (9,83): 7.5,
   (9,99): 2.8, (10,11): 5.9, (11,12): 1, (11,37): 0.4, (12,13): 2.8, (13,8): 7.7,
   (13,14): 6.3, (13,42): 0.3, (14,15): 0.9, (14,85): 9, (15,16): 10, (15,50): 3.1,
   (15,69): 4.6, (16,17): 9.8, (16,79): 9.6, (17,18): 7, (18,19): 9.4, (18,75): 10,
   (19,7): 0.9, (19,20): 2.2, (19,60): 5.3, (19,92): 7, (20,19): 3, (20,21): 1.4,
   (20,93): 3.5, (21,14): 8.2, (21,22): 8.7, (21,81): 3.4, (22,23): 8.2, (22,52): 1.1,
   (23,24): 5.5, (24,25): 0.2, (24,59): 6.3, (25,26): 3.2, (25,99): 1.9, (26,27): 7.7,
   (26,29): 2, (26,32): 2.6, (27,14): 4.8, (27,28): 9.5, (28,29): 2.9, (29,30): 5.9,
   (30,31): 9.1, (30,57): 3.7, (30,70): 0.5, (31,32): 8.9, (31,63): 8.2, (31,69): 5.3,
   (32,33): 5, (33,34): 4, (33,49): 7.7, (34,35): 8.8, (34,94): 5.2, (35,7): 0.7,
   (35,36): 9.4, (35,60): 0.5, (35,80): 4.6, (36,37): 6, (37,38): 2.1, (37,81): 1.4,
   (38,16): 7, (38,18): 2.7, (38,39): 8.9, (39,21): 5.9, (39,40): 4.7, (39,76): 8.9,
   (40,41): 6.3, (41,42): 4.5, (41,44): 8, (41,76): 4.2, (42,43): 4.6, (42,45): 6.8,
   (42,57): 0.5, (42,85): 3.4, (43,44): 2.4, (44,12): 5.6, (44,45): 7.7, (45,46): 6,
   (45,59): 3.3, (45,68): 1.9, (46,47): 4.5, (47,48): 5, (48,49): 9.3, (48,98): 5.3,
   (49,8): 9.6, (49,50): 2.2, (50,27): 1.6, (50,51): 8.4, (51,52): 1.6, (52,53): 8.5,
   (52,95): 9.6, (53,54): 6.8, (54,17): 4.5, (54,40): 5.2, (54,55): 9.3, (54,59): 7.5,
   (54,86): 3.5, (55,56): 3.7, (56,30): 7.6, (56,57): 2.6, (57,58): 2.9, (58,17): 6,
   (58,47): 6.8, (58,59): 3.8, (58,73): 3.7, (59,60): 1, (60,27): 8.6, (60,52): 3.4,
   (60,61): 3.2, (61,62): 6.7, (61,65): 7.3, (62,7): 5.5, (62,38): 5.6, (62,63): 6.6,
   (62,94): 9.6, (63,64): 5.2, (64,51): 8.9, (64,65): 1.9, (65,66): 3.9, (65,94): 6.1,
   (66,67): 1.2, (67,68): 8.6, (68,4): 2.8, (68,69): 7.2, (69,70): 7.3, (70,30): 7.4,
   (70,71): 6.5, (71,72): 0.2, (72,73): 0.8, (73,4): 4.1, (73,33): 8.8, (73,74): 9.6,
   (74,53): 5, (74,75): 4.3, (75,22): 4.8, (75,76): 3.9, (76,77): 6.1, (77,78): 9,
   (78,79): 0.8, (79,3): 5.7, (79,80): 5.8, (80,5): 9, (80,81): 9.1, (80,91): 8.4,
   (81,30): 9.9, (81,82): 5.8, (81,95): 5.4, (82,83): 1.3, (83,84): 7.9, (84,85): 5.9,
   (85,13): 2.2, (85,69): 5.1, (85,86): 2.8, (86,87): 4.6, (87,88): 2.4, (87,91): 1.7,
   (88,33): 0.8, (88,89): 6.3, (89,90): 8.1, (90,91): 1.4, (90,95): 9.6, (91,75): 3.3,
   (91,76): 5.1, (91,78): 3.2, (91,92): 5.2, (92,93): 6.4, (93,94): 7.5, (94,90): 6.3,
   (94,95): 7.1, (95,1): 3.1, (95,30): 9.6, (95,55): 4.7, (95,96): 5.1, (96,5): 8.7,
   (96,97): 7.5, (97,66): 8.1, (97,98): 5.7, (98,99): 3.1, (99,3): 4.9, (99,32): 3.5,
   (99,100): 4.9, (100,1): 8.8}

# Variables
x = {}
for i in P:
    for j in P:
        if c.get((i, j), 0) != 0:
            x[i, j] = solver.NumVar(0, solver.infinity(), f'x_{i}_{j}')

# Objective function
Cost = solver.Objective()
Cost = sum(c[i, j] * x[i, j] for i in P for j in P if c.get((i, j), 0) != 0)
solver.Minimize(Cost)

# Constraints
for i in O:
    solver.Add(sum(x[j, i] for j in P if c.get((j, i), 0) != 0) + o[i] == sum(x[i,j] for j in P if c.get((i, j),0) != 0))

for i in D:
    solver.Add(sum(x[j, i] for j in P if c.get((j, i), 0) != 0) - d[i] == sum(x[i, j] for j in P if c.get((i, j), 0) != 0))

for i in P - set(O) - set(D):
    solver.Add(sum(x[j, i] for j in P if c.get((j, i), 0) != 0) == sum(x[i, j] for j in P if c.get((i, j), 0) != 0))

# Solve the problem
solver.Solve()

# Print the results
print(f'Costo mÃ­nimo: {solver.Objective().Value()*1000}')
for i in P:
    for j in P:
        if c.get((i, j), 0) != 0 and x[i, j].solution_value() > epsilon:
            print(f'Enviar {round(x[i, j].solution_value())*1000} barriles del puerto {i} al puerto {j}')